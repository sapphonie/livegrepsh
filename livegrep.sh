#!/bin/bash

set -euo pipefail
shopt -s inherit_errexit
shopt -s extglob


which spruce 2>/dev/null || `echo "Install Spruce! https://github.com/geofffranks/spruce"; exit 1`
LG_STORAGE_DIR="/home/${SUDO_USER}/livegrep_store/"
mkdir -p "${LG_STORAGE_DIR}"    || true
mkdir -p "${LG_STORAGE_DIR}/local_stuff"    || true

echo "Storing stuff in ${LG_STORAGE_DIR}!"

NO_FORMAT="\x1B[0m"
C_RED="\x1B[38;5;9m"


killOldDockers()
{
    docker rm livegrep-re-indexer       || true
    docker stop livegrep-gh-indexer     || true
    docker stop livegrep-re-indexer     || true
    docker stop livegrep-do-index       || true
    docker stop livegrep-backend        || true
    docker stop livegrep-web            || true
}

iterateNonGithubDirectories()
{
    pushd "${LG_STORAGE_DIR}"       || exit 1
    pushd local_stuff               || exit 1

    tmpFile="${LG_STORAGE_DIR}/lg_local_stuff.json"

    # make sure file is empty
    truncate -s 0 "${tmpFile}"

    # header
    {
        printf '\n{'
        printf '\n  "name": "A Treasure Trove",'
        printf '\n  "repositories": ['
    } >> "${tmpFile}"


    # this is really stupid, but we iterate through this directory structure twice,
    # so that we can get the last directory we will work on
    # this is important so that we don't generate invalid json,
    # by having a comma at the end of a key
    lastDirectoryIdx=0;
    for thisdir in */ ; do

        # symlink
        [ -L "${thisdir%/}" ]   && continue
        # empty dir structure
        [ -e "$thisdir" ]       || continue

        (( lastDirectoryIdx+=1 ))
    done

    # e.g
    trailingComma=','

    thisIdx=0;
    for thisdir in */ ; do

        # symlink
        [ -L "${thisdir%/}" ]   && continue
        # empty dir structure
        [ -e "$thisdir" ]       || continue

        (( thisIdx+=1 ))

        # this is the last directory, we need to blank the trailing comma
        # so it doesn't get printed
        if [ ${thisIdx} == ${lastDirectoryIdx} ]; then
            echo "trailing comma = null";
            trailingComma='';
        fi;

        # strip the trailing slashes
        realActualDir=${thisdir%%+(/)}

        # footer
        {
            printf '\n        {'
            printf '\n          "path": "/data/local_stuff/%s"', "${realActualDir}"
            printf '\n          "name": "local_stuff/%s"', "${realActualDir}"
            printf '\n          "revisions": ['
            printf '\n            "HEAD"'
            printf '\n          ]'
            printf '\n        }%s' "${trailingComma}"
        } >> "${tmpFile}"
    done
    
    # footer
    {
        printf '\n   ]'
        printf '\n }'
    } >> "${tmpFile}"

    popd || exit 1
    # popd || exit 1
}


baseImg="ghcr.io/livegrep/livegrep/base"
idxImg="ghcr.io/livegrep/livegrep/indexer"

reindexGithubRepos()
{
    # This is for fetching all repos by users on GH - this will produce a livegrep.json in ${LG_STORAGE_DIR}":/data ,
    # We can't change where that goes. Unlucky
    docker run    --rm -v "${LG_STORAGE_DIR}":/data     \
        ${idxImg}                                       \
            /livegrep/bin/livegrep-github-reindex       \
                -user=sapphonie                         \
                -user=alliedmodders                     \
                -forks=false                            \
                -skip-missing=false                     \
                -http                                   \
                -dir /data                              \
                -no-index

}

combineIndexes()
{
    # https://github.com/geofffranks/spruce
    # This will merge our custom generated json file for our local repos and the autogenerated one made by livegrep-gh-indexer 
    spruce merge livegrep.json lg_local_stuff.json | spruce json | jq -S -M > lg_merged.json || exit 1
    mv -vf lg_merged.json livegrep.json
}

runIndexing()
{
    # create a network for these containers to talk to, ignore failure if it already exists
    docker network create livegrep &> /dev/null || true



    docker run -d --rm -v ${LG_STORAGE_DIR}:/data       \
        --network livegrep                              \
        --name livegrep-backend                         \
        "${baseImg}"                                    \
            /livegrep/bin/codesearch                    \
                -hot_index_reload=true                  \
                -grpc 0.0.0.0:9999                      \
                /data/livegrep.json
}

runWebFrontend()
{
    docker run -d --rm -v ${LG_STORAGE_DIR}:/data       \
        --network livegrep                              \
        --name livegrep-web                             \
        --publish 8910:8910                             \
        "${baseImg}"                                    \
            /livegrep/bin/livegrep                      \
                -index-config /data/lg_merged.json      \
                -docroot /livegrep/web                  \
                -listen=0.0.0.0:8910                    \
                --connect livegrep-backend:9999
}



killOldDockers                      || echo -e "${C_RED}FAILED killOldDocker${NO_FORMAT}"
iterateNonGithubDirectories         || echo -e "${C_RED}FAILED iterateNonGithubDirectories${NO_FORMAT}"
reindexGithubRepos                  || echo -e "${C_RED}FAILED reindexGithubRepos${NO_FORMAT}"
combineIndexes                      || echo -e "${C_RED}FAILED combineIndexes${NO_FORMAT}"
runIndexing                         || echo -e "${C_RED}FAILED runIndexing${NO_FORMAT}"
runWebFrontend                      || echo -e "${C_RED}FAILED runWebFrontend${NO_FORMAT}"




# Usage of /livegrep/bin/livegrep-github-reindex:
#   -api-base-url string
#     	Github API base url (default "https://api.github.com/")
#   -archived
#     	whether to index repositories that are archived on github
#   -blacklist string
#     	[DEPRECATED] This flag has been deprecated and will be removed in a future release. Please switch to the '-ignorelist' option.
#   -codesearch codesearch
#     	Path to the codesearch binary
#   -depth int
#     	clone repository with specify --depth=N depth.
#   -dir string
#     	Directory to store repos (default "repos")
#   -fetch-reindex livegrep-fetch-reindex
#     	Path to the livegrep-fetch-reindex binary
#   -forks
#     	whether to index repositories that are github forks, and not original repos (default true)
#   -github-key string
#     	Github API key
#   -http
#     	clone repositories over HTTPS instead of SSH
#   -http-user string
#     	Override the username to use when cloning over https (default "git")
#   -ignorelist string
#     	File containing a list of repositories to ignore when indexing
#   -installation-token
#     	Treat the API key as a Github Application Installation Key when cloning
#   -max-concurrent-gh-requests int
#     	Applied per org/user. If fetching 2 orgs, you will have 2x{yourInput} network calls possible at a time (default 1)
#   -name string
#     	The name to be stored in the index file (default "livegrep index")
#   -no-index
#     	Skip indexing after writing config and fetching
#   -num-repo-update-workers string
#     	Number of workers fetch-reindex will use to update repositories (default "8")
#   -org value
#     	Specify a github organization to index (may be passed multiple times)
#   -out value
#     	Path to write the index (default ${dir}/livegrep.idx)
#   -repo value
#     	Specify a repo to index (may be passed multiple times)
#   -revision string
#     	git revision to index (default "HEAD")
#   -revparse git rev-parse
#     	whether to git rev-parse the provided revision in generated links (default true)
#   -skip-missing
#     	skip repositories where the specified revision is missing
#   -url-pattern string
#     	when using the local frontend fileviewer, this string will be used to construt a link to the file source on github (default "https://github.com/{name}/blob/{version}/{path}#L{lno}")
#   -user value
#     	Specify a github user to index (may be passed multiple times)


# Usage of /livegrep/bin/livegrep-fetch-reindex:
#   -codesearch codesearch
#     	Path to the codesearch binary
#   -no-index
#     	Skip indexing after fetching
#   -num-workers int
#     	Number of workers used to update repositories (default 8)
#   -out string
#     	Path to write the index (default "livegrep.idx")
#   -reload-backend string
#     	Backend to send a Reload RPC to
#   -revparse git rev-parse
#     	whether to git rev-parse the provided revision in generated links (default true)
#   -skip-missing
#     	skip repositories where the specified revision is missing

# codesearch: Usage: /livegrep/bin/codesearch <options> REFS
#     -helpxml (produce an xml version of help) type: bool default: false
#     -version (show version and build info and exit) type: bool default: false
# 
# 
# 
#   Flags from src/chunk_allocator.cc:
#     -chunk_power (Size of search chunks, as a power of two) type: int32
#       default: 27
# 
#   Flags from src/codesearch.cc:
#     -compress (Compress file contents linewise) type: bool default: true
#     -drop_cache (Drop caches before each search) type: bool default: false
#     -index (Create a suffix-array index to speed searches.) type: bool
#       default: true
#     -line_limit (Maximum line length to index.) type: int32 default: 1024
#     -search (Actually do the search.) type: bool default: true
#     -threads (Number of threads to use.) type: int32 default: 4
#     -timeout (The number of milliseconds a single search may run for.)
#       type: int32 default: 1000
# 
#   Flags from src/dump_load.cc:
#     -eager_memory_load (Eagerly load memory-mapped index file pages into
#       virtual memory (Linux only)) type: bool default: false
# 
#   Flags from src/git_indexer.cc:
#     -order_root (Walk top-level directories in this order.) type: string
#       default: ""
#     -revparse (Display parsed revisions, rather than as-provided) type: bool
#       default: false
# 
# 
# 
#   Flags from src/lib/debug.cc:
#     -debug (Enable debugging for selected subsystems) type: string default: ""
# 
# 
# 
#   Flags from src/tools/codesearch.cc:
#     -dump_index (Dump the produced index to a specified file) type: string
#       default: ""
#     -grpc (GRPC listener address) type: string default: "localhost:9999"
#     -hot_index_reload (Enable automatic reloads when the index file changes)
#       type: bool default: false
#     -index_only (Build the index and don't serve queries) type: bool
#       default: false
#     -load_index (Load the index from a file instead of walking the repository)
#       type: string default: ""
#     -load_tags (Load the index built from a tags file.) type: string
#       default: ""
#     -max_recv_message_size (Maximum gRPC receive (inbound) message size in
#       bytes) type: int32 default: 0
#     -max_send_message_size (Maximum gRPC send (outbound) message size in bytes)
#       type: int32 default: 0
#     -quiet (Do the search, but don't print results.) type: bool default: false
#     -reload_rpc (Enable the Reload RPC) type: bool default: false
#     -reuseport (Set SO_REUSEPORT to enable multiple concurrent server
#       instances.) type: bool default: true
# 
#   Flags from src/tools/grpc_server.cc:
#     -context_lines (The default number of result context lines to provide for a
#       single query.) type: int32 default: 3
#     -max_matches (The default maximum number of matches to return for a single
#       query.) type: int32 default: 50
